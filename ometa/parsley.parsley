comment = '#' (~'\n' anything)*
hspace = ' ' | '\t' | comment
vspace = token("\r\n") | '\r' | '\n'
emptyline = hspace* vspace
indentation = emptyline* hspace+
noindentation = emptyline* ~~~hspace

number = spaces
               ('-' barenumber:x  -> t.Exactly(-x)
                    |barenumber:x -> t.Exactly(x))
barenumber = '0' (('x'|'X') <hexdigit+>:hs -> int(hs, 16)
                    |<octaldigit+>:ds -> int(ds, 8))
               |<digit+>:ds -> int(ds)
octaldigit = :x ?(x in '01234567' ) -> x
hexdigit = :x ?(x in '0123456789ABCDEFabcdef') -> x

escapedChar = '\\' ('n' -> "\n"
                     |'r' -> "\r"
                     |'t' -> "\t"
                     |'b' -> "\b"
                     |'f' -> "\f"
                     |'"' -> '"'
                     |'\'' -> "'"
                     |'x' <hexdigit hexdigit>:d -> chr(int(d, 16))
                     |'\\' -> "\\")

character = token("'") (~'\'' (escapedChar | anything))+:c
            token("'") -> t.Exactly(''.join(c))

string = token('"') (escapedChar | ~('"') anything)*:c
         token('"') -> t.Token(''.join(c))

name = <letter letterOrDigit*>

args = ('(' !(self.applicationArgs(finalChar=')')):args ')'
            -> args
          | -> [])

application = indentation? name:name args:args
                -> t.Apply(name, self.rulename, args)

foreignApply = indentation? name:grammar_name '.' name:rule_name args:args
                -> t.ForeignApply(grammar_name, rule_name, self.rulename, args)

expr1 = foreignApply
          |application
          |ruleValue
          |semanticPredicate
          |semanticAction
          |number:n !(self.isTree()) -> n
          |character
          |string
          |token('(') expr:e token(')') -> e
          |token('<') expr:e token('>')
             -> t.ConsumedBy(e)
          |token('[') expr:e token(']') !(self.isTree())
             -> t.List(e)

expr2 = (token('~') (token('~') expr2:e -> t.Lookahead(e)
                    |           expr2:e -> t.Not(e)
                    )
        |expr1)

repeatTimes = (barenumber:x -> int(x)) | name

expr3 = (expr2:e
                      ('*' -> t.Many(e)
                      |'+' -> t.Many1(e)
                      |'?' -> t.Optional(e)
                      |'{' spaces repeatTimes:start spaces (
                      (',' spaces repeatTimes:end spaces '}'
                           -> t.Repeat(start, end, e))
                         | spaces '}'
                           -> t.Repeat(start, start, e))
                      | -> e
)):r
           (':' name:n -> t.Bind(n, r)
           | -> r)
          |token(':') name:n
          -> t.Bind(n, t.Apply("anything", self.rulename, []))

expr4 = expr3*:es -> t.And(es)

expr = expr4:e (token('|') expr4)*:es
          -> t.Or([e] + es)

ruleValue = token("->") -> self.ruleValueExpr(True)

semanticPredicate = token("?(") -> self.semanticPredicateExpr()

semanticAction = token("!(") -> self.semanticActionExpr()

ruleEnd = (hspace* vspace+) | end

rulePart :requiredName = noindentation name:n ?(n == requiredName)
                            !(setattr(self, "rulename", n))
                            expr4:args
                            (token("=") expr:e ruleEnd
                               -> t.And([args, e])
                            | ruleEnd -> args)

rule = noindentation ~~(name:n) rulePart(n)+:rs -> t.Rule(n, t.Or(rs))


grammar = rule*:rs spaces -> t.Grammar(self.name, self.tree, rs)
